// Blog Update System Types for Adam Halls Garden Center
// Designed for 3 posts per week (Monday, Wednesday, Friday)

export interface BlogPost {
  id: string;
  title: string;
  slug: string;
  excerpt: string;
  content: string;
  author: string;
  authorId: string;
  category: BlogCategory;
  tags: string[];
  featuredImage: string;
  images: string[];
  
  // Publishing
  status: 'draft' | 'scheduled' | 'published' | 'archived';
  publishDate: string; // ISO date string
  publishTime: string; // HH:MM format
  scheduledDate?: string; // For scheduled posts
  
  // SEO
  metaTitle: string;
  metaDescription: string;
  keywords: string[];
  
  // Engagement
  views: number;
  likes: number;
  shares: number;
  comments: Comment[];
  
  // Content Management
  readingTime: number; // in minutes
  wordCount: number;
  lastModified: string;
  created: string;
  
  // Garden Center Specific
  relatedProducts?: string[]; // Product IDs
  seasonalRelevance?: Season[];
  plantCareTips?: PlantCareTip[];
  gardenAdvice?: string[];
  
  // Social Media
  socialMediaExcerpt: string;
  socialMediaImage: string;
  autoShare: boolean;
  
  // Analytics
  engagementRate: number;
  bounceRate: number;
  timeOnPage: number;
}

export interface BlogCategory {
  id: string;
  name: string;
  slug: string;
  description: string;
  color: string;
  icon: string;
  parentCategory?: string; // For subcategories
  postCount: number;
}

export interface BlogSchedule {
  id: string;
  weekStart: string; // ISO date string
  weekEnd: string; // ISO date string
  weekNumber: number;
  year: number;
  
  // Weekly Schedule (3 posts per week)
  monday: BlogPostSlot;
  wednesday: BlogPostSlot;
  friday: BlogPostSlot;
  
  // Weekly Goals
  weeklyGoals: string[];
  contentThemes: string[];
  targetAudience: string[];
  
  // Performance Metrics
  totalViews: number;
  totalEngagement: number;
  averageReadingTime: number;
  topPerformingPost?: string;
  
  // Content Planning
  contentIdeas: ContentIdea[];
  pendingTopics: string[];
  completedTopics: string[];
  
  // Generated by
  generatedBy: string;
  generatedAt: string;
  lastUpdated: string;
}

export interface BlogPostSlot {
  date: string;
  time: string;
  postId?: string;
  postTitle?: string;
  status: 'empty' | 'draft' | 'scheduled' | 'published';
  topic?: string;
  category?: string;
  author?: string;
  notes?: string;
}

export interface ContentIdea {
  id: string;
  title: string;
  description: string;
  category: string;
  targetAudience: string[];
  seasonalRelevance: Season[];
  estimatedReadingTime: number;
  difficulty: 'easy' | 'medium' | 'hard';
  requiredResources: string[];
  status: 'idea' | 'researching' | 'writing' | 'reviewing' | 'ready';
  assignedTo?: string;
  dueDate?: string;
  priority: 'low' | 'medium' | 'high' | 'urgent';
  tags: string[];
  notes: string;
}

export interface Comment {
  id: string;
  postId: string;
  author: string;
  authorEmail: string;
  content: string;
  rating?: number; // 1-5 stars
  status: 'pending' | 'approved' | 'spam' | 'rejected';
  createdAt: string;
  parentComment?: string; // For replies
  likes: number;
  isVerifiedCustomer: boolean;
}

export interface PlantCareTip {
  plantType: string;
  tip: string;
  difficulty: 'beginner' | 'intermediate' | 'advanced';
  season: Season[];
  careLevel: 'low' | 'medium' | 'high';
}

export interface Season {
  name: 'Spring' | 'Summer' | 'Fall' | 'Winter';
  months: number[]; // 1-12
  description: string;
}

export interface BlogAnalytics {
  period: string;
  startDate: string;
  endDate: string;
  
  // Post Performance
  totalPosts: number;
  totalViews: number;
  totalLikes: number;
  totalShares: number;
  totalComments: number;
  
  // Engagement Metrics
  averageViewsPerPost: number;
  averageLikesPerPost: number;
  averageSharesPerPost: number;
  averageCommentsPerPost: number;
  averageReadingTime: number;
  bounceRate: number;
  
  // Top Performing
  topPosts: TopPost[];
  topCategories: TopCategory[];
  topAuthors: TopAuthor[];
  
  // Audience Insights
  peakPublishingTimes: PublishingTime[];
  mostEngagedAudience: AudienceSegment[];
  contentPreferences: ContentPreference[];
  
  // Growth Metrics
  viewsGrowth: number;
  engagementGrowth: number;
  audienceGrowth: number;
}

export interface TopPost {
  postId: string;
  title: string;
  views: number;
  likes: number;
  shares: number;
  comments: number;
  engagementRate: number;
}

export interface TopCategory {
  category: string;
  postCount: number;
  totalViews: number;
  averageViews: number;
  engagementRate: number;
}

export interface TopAuthor {
  author: string;
  postCount: number;
  totalViews: number;
  averageViews: number;
  engagementRate: number;
}

export interface PublishingTime {
  dayOfWeek: string;
  timeSlot: string;
  averageViews: number;
  averageEngagement: number;
}

export interface AudienceSegment {
  segment: string;
  size: number;
  engagementRate: number;
  preferredContent: string[];
}

export interface ContentPreference {
  contentType: string;
  views: number;
  engagementRate: number;
  audienceRetention: number;
}

export interface BlogContentCalendar {
  month: number;
  year: number;
  weeks: BlogSchedule[];
  
  // Monthly Goals
  monthlyGoals: string[];
  contentThemes: string[];
  targetMetrics: {
    totalPosts: number;
    totalViews: number;
    averageEngagement: number;
    audienceGrowth: number;
  };
  
  // Content Planning
  seasonalContent: SeasonalContent[];
  promotionalContent: PromotionalContent[];
  evergreenContent: EvergreenContent[];
  
  // Publishing Schedule
  publishingSchedule: PublishingSchedule[];
  contentDeadlines: ContentDeadline[];
  
  // Team Coordination
  assignedWriters: AssignedWriter[];
  reviewSchedule: ReviewSchedule[];
  publishingChecklist: PublishingChecklist[];
}

export interface SeasonalContent {
  season: Season;
  contentThemes: string[];
  postIdeas: string[];
  targetAudience: string[];
  promotionalOpportunities: string[];
}

export interface PromotionalContent {
  type: 'sale' | 'event' | 'new-product' | 'seasonal-offer';
  title: string;
  description: string;
  publishDate: string;
  callToAction: string;
  relatedProducts: string[];
}

export interface EvergreenContent {
  title: string;
  category: string;
  lastUpdated: string;
  nextReviewDate: string;
  performanceScore: number;
  updateNeeded: boolean;
}

export interface PublishingSchedule {
  date: string;
  time: string;
  postTitle: string;
  author: string;
  status: 'draft' | 'review' | 'approved' | 'scheduled' | 'published';
  category: string;
  notes: string;
}

export interface ContentDeadline {
  task: string;
  dueDate: string;
  assignedTo: string;
  priority: 'low' | 'medium' | 'high' | 'urgent';
  status: 'pending' | 'in-progress' | 'completed' | 'overdue';
  notes: string;
}

export interface AssignedWriter {
  writerId: string;
  name: string;
  assignedPosts: number;
  completedPosts: number;
  averageQuality: number;
  specialties: string[];
  availability: WriterAvailability[];
}

export interface WriterAvailability {
  dayOfWeek: string;
  available: boolean;
  preferredTimeSlots: string[];
  maxPostsPerDay: number;
}

export interface ReviewSchedule {
  postId: string;
  postTitle: string;
  author: string;
  submittedDate: string;
  reviewer: string;
  reviewDeadline: string;
  status: 'pending' | 'in-review' | 'approved' | 'revisions-needed';
  feedback: string[];
}

export interface PublishingChecklist {
  postId: string;
  postTitle: string;
  checklist: ChecklistItem[];
  completedAt?: string;
  completedBy?: string;
}

export interface ChecklistItem {
  item: string;
  completed: boolean;
  completedAt?: string;
  completedBy?: string;
  notes?: string;
}

export interface BlogFilters {
  category?: string;
  author?: string;
  status?: string;
  dateRange?: {
    start: string;
    end: string;
  };
  tags?: string[];
  seasonalRelevance?: Season[];
  searchQuery?: string;
}

export interface BlogSearchResult {
  posts: BlogPost[];
  totalResults: number;
  categories: BlogCategory[];
  tags: string[];
  authors: string[];
  seasonalContent: SeasonalContent[];
}
